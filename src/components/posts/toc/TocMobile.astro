---
import type { CollectionEntry } from 'astro:content'
import type { MarkdownHeading } from 'astro'
import SimpleProgressRing from './SimpleProgressRing.astro'

interface Props {
  post: CollectionEntry<'posts'>
  posts: CollectionEntry<'posts'>[]
  headings: MarkdownHeading[]
}

const { post, posts, headings } = Astro.props
const hasHeadings = headings.length > 0

// 过滤并处理标题
const filteredHeadings = headings
  .filter((h) => h.depth <= 4 && h.text.trim())
  .map((h, index) => ({
    ...h,
    text: h.text.replace(/\s*[Hh][1-6]$/g, ''),
    order: index + 1,
  }))
---

{
  hasHeadings && (
    <div id="mobile-toc-container" class="lg:hidden sticky top-0 z-30 relative">
      <details class="group">
        <summary class="flex w-full cursor-pointer items-center justify-between relative md:bg-transparent bg-background/95 backdrop-blur-sm border-b border-border/60 px-6 sm:px-8 py-3 select-none">
          <div class="flex gap-4 items-center min-w-0 flex-1">
            <SimpleProgressRing size={16} strokeWidth={2} class="flex-shrink-0" />
            <span id="mobile-toc-current-section" class="text-sm font-medium text-foreground/80 truncate">
              Overview
            </span>
          </div>
          <div class="flex items-center gap-2 pl-2">
            <span class="icon-[ph--caret-down] w-4 h-4 text-primary/70 transition-transform duration-200 group-open:rotate-180" />
          </div>
        </summary>

        <div class="absolute top-full left-0 right-0 z-40 md:bg-transparent bg-background/98 backdrop-blur-sm border-b border-border/30 overflow-hidden" data-toc-content>
          <div class="relative">
            <div
              class="absolute top-0 left-0 right-0 h-8 bg-gradient-to-b from-background/98 to-transparent pointer-events-none z-10 opacity-0 transition-opacity duration-200"
              data-fade-top
            />
            <div
              class="absolute bottom-0 left-0 right-0 h-8 bg-gradient-to-t from-background/98 to-transparent pointer-events-none z-10 opacity-0 transition-opacity duration-200"
              data-fade-bottom
            />

            <div class="max-h-[30vh] overflow-y-auto no-scrollbar" data-toc-scroll-area>
              <ul class="px-6 sm:px-8 py-2 space-y-2" id="mobile-table-of-contents">
                {filteredHeadings.map((heading) => {
                  const indentClass =
                    {
                      2: '',
                      3: 'ml-3',
                      4: 'ml-6',
                    }[heading.depth] || ''

                  return (
                    <li class={`flex items-start gap-2 min-w-0 ${indentClass}`}>
                      <span
                        class="text-primary/40 font-mono text-xs mt-1 min-w-[1.5rem] transition-colors duration-200 flex-shrink-0 mobile-toc-number"
                        data-order={heading.order}
                      >
                        {heading.order.toString().padStart(2, '0')}
                      </span>
                      <a
                        href={`#${heading.slug}`}
                        class="text-sm text-foreground/70 hover:text-primary hover:underline transition-colors duration-200 leading-relaxed truncate mobile-toc-item"
                        data-heading-id={heading.slug}
                        data-heading-text={heading.text}
                      >
                        {heading.text}
                      </a>
                    </li>
                  )
                })}
              </ul>
            </div>
          </div>
        </div>
      </details>
    </div>
  )
}

<script>
  const INITIAL_OVERVIEW_TEXT = 'Overview'
  const TOC_OFFSET = 36

  class MobileTOCState {
    currentSectionText: HTMLElement | null = null
    detailsElement: HTMLDetailsElement | null = null
    listElement: HTMLElement | null = null
    scrollArea: HTMLElement | null = null
    fadeTop: HTMLElement | null = null
    fadeBottom: HTMLElement | null = null
    headings: HTMLElement[] = []
    regions: { id: string; start: number; end: number }[] = []
    activeIds: string[] = []

    reset(): void {
      this.currentSectionText = document.getElementById('mobile-toc-current-section')
      this.detailsElement = document.querySelector('#mobile-toc-container details')
      this.listElement = document.getElementById('mobile-table-of-contents')
      this.scrollArea = document.querySelector('[data-toc-scroll-area]')
      this.fadeTop = document.querySelector('[data-fade-top]')
      this.fadeBottom = document.querySelector('[data-fade-bottom]')
      this.headings = []
      this.regions = []
      this.activeIds = []
    }
  }

  const state = new MobileTOCState()

  class HeadingRegions {
    static build(): void {
      // 获取所有标题，排除脚注
      state.headings = Array.from(document.querySelectorAll<HTMLElement>('h1[id], h2[id], h3[id], h4[id], h5[id], h6[id]')).filter(
        (heading) => heading.id !== 'footnote-label'
      )

      if (state.headings.length === 0) {
        state.regions = []
        return
      }

      // 构建标题区域映射
      state.regions = state.headings
        .filter((heading) => heading.id !== 'footnote-label')
        .map((heading, index) => {
          const nextHeading = state.headings[index + 1]
          return {
            id: heading.id,
            start: heading.offsetTop - TOC_OFFSET,
            end: nextHeading ? nextHeading.offsetTop - TOC_OFFSET : document.documentElement.scrollHeight,
          }
        })
    }

    static getVisibleIds(): string[] {
      if (state.headings.length === 0) return []

      const scrollTop = window.scrollY

      // 如果在页面顶部（滚动位置小于第一个标题位置），显示 Overview
      if (scrollTop < state.regions[0]?.start) {
        return []
      }

      // 找到当前滚动位置对应的标题
      const activeRegion = state.regions.find((region) => scrollTop >= region.start && scrollTop < region.end)

      if (activeRegion) {
        return [activeRegion.id]
      }

      // 如果滚动到最底部，返回最后一个标题
      const documentHeight = document.documentElement.scrollHeight
      const windowHeight = window.innerHeight
      if (scrollTop + windowHeight >= documentHeight - 10) {
        return [state.regions[state.regions.length - 1]?.id].filter(Boolean)
      }

      return []
    }
  }

  class TOCScrollMask {
    static update(): void {
      if (!state.scrollArea || !state.fadeTop || !state.fadeBottom) return

      const { scrollTop, scrollHeight, clientHeight } = state.scrollArea
      const threshold = 10

      const showTopFade = scrollTop > threshold
      const showBottomFade = scrollTop < scrollHeight - clientHeight - threshold

      state.fadeTop.style.opacity = showTopFade ? '1' : '0'
      state.fadeBottom.style.opacity = showBottomFade ? '1' : '0'
    }
  }

  class MobileTOCLinks {
    static update(headingIds: string[]): void {
      if (!state.listElement || !state.currentSectionText) return

      // 重置所有项目状态
      state.listElement.querySelectorAll('.mobile-toc-item').forEach((item) => {
        const tocItem = item as HTMLElement
        tocItem.classList.remove('text-primary', 'font-semibold')
        tocItem.classList.add('text-foreground/70')
      })

      state.listElement.querySelectorAll('.mobile-toc-number').forEach((number) => {
        const tocNumber = number as HTMLElement
        tocNumber.classList.remove('text-primary', 'font-semibold')
        tocNumber.classList.add('text-primary/40')
      })

      // 高亮当前活跃项
      if (headingIds.length > 0) {
        const activeId = headingIds[0]
        const activeItem = state.listElement.querySelector(`[data-heading-id="${activeId}"]`) as HTMLElement
        const activeNumber = state.listElement.querySelector(`[data-order="${this.getOrderByHeadingId(activeId)}"]`) as HTMLElement

        if (activeItem) {
          activeItem.classList.remove('text-foreground/70')
          activeItem.classList.add('text-primary', 'font-semibold')
        }

        if (activeNumber) {
          activeNumber.classList.remove('text-primary/40')
          activeNumber.classList.add('text-primary', 'font-semibold')
        }

        this.scrollToActive(activeId)
      }

      this.updateCurrentSectionText(headingIds)
    }

    static getOrderByHeadingId(headingId: string): string {
      const item = state.listElement?.querySelector(`[data-heading-id="${headingId}"]`)
      return item?.getAttribute('data-heading-text') || ''
    }

    static updateCurrentSectionText(headingIds: string[]): void {
      if (!state.currentSectionText) return

      let textToShow = INITIAL_OVERVIEW_TEXT

      // 只有当确实有活跃标题时才更新文本
      if (headingIds.length > 0) {
        const activeId = headingIds[0]
        const activeItem = state.listElement?.querySelector(`[data-heading-id="${activeId}"]`) as HTMLElement
        const cleanText = activeItem?.dataset.headingText

        if (cleanText) {
          textToShow = cleanText
        }
      }

      state.currentSectionText.textContent = textToShow
    }

    static scrollToActive(activeHeadingId: string): void {
      if (!state.listElement || !state.scrollArea) return

      const activeItem = state.listElement.querySelector(`[data-heading-id="${activeHeadingId}"]`)
      if (!activeItem) return

      const containerRect = state.scrollArea.getBoundingClientRect()
      const itemRect = activeItem.getBoundingClientRect()

      const relativeTop = itemRect.top - containerRect.top + state.scrollArea.scrollTop
      const targetScrollTop = relativeTop - containerRect.height / 2 + itemRect.height / 2

      const targetScroll = Math.max(0, Math.min(targetScrollTop, state.scrollArea.scrollHeight - state.scrollArea.clientHeight))

      if (Math.abs(targetScroll - state.scrollArea.scrollTop) > 5) {
        state.scrollArea.scrollTo({
          top: targetScroll,
          behavior: 'smooth',
        })
      }
    }

    static setupInteraction(): void {
      if (!state.listElement) return

      // 点击目录链接时关闭详情
      state.listElement.querySelectorAll('.mobile-toc-item').forEach((item) => {
        item.addEventListener('click', (e) => {
          e.preventDefault()
          const href = (item as HTMLElement).getAttribute('href')
          if (!href) return

          const target = document.querySelector(href)
          if (!target) return

          // 关闭详情
          if (state.detailsElement) {
            state.detailsElement.open = false
          }

          // 平滑滚动到目标
          setTimeout(() => {
            const targetTop = (target as HTMLElement).offsetTop - TOC_OFFSET
            window.scrollTo({
              top: Math.max(0, targetTop),
              behavior: 'smooth',
            })
          }, 200)
        })
      })

      // 设置滚动区域遮罩
      if (state.scrollArea) {
        state.scrollArea.addEventListener('scroll', TOCScrollMask.update, { passive: true })
      }

      // 详情展开时更新遮罩
      if (state.detailsElement) {
        state.detailsElement.addEventListener('toggle', () => {
          if (state.detailsElement?.open) {
            setTimeout(TOCScrollMask.update, 100)
          }
        })
      }
    }
  }

  class MobileTOCController {
    private static scrollRAF: number | null = null
    private static resizeRAF: number | null = null

    static handleScroll(): void {
      if (this.scrollRAF) return

      this.scrollRAF = requestAnimationFrame(() => {
        const newActiveIds = HeadingRegions.getVisibleIds()

        if (JSON.stringify(newActiveIds) !== JSON.stringify(state.activeIds)) {
          state.activeIds = newActiveIds
          MobileTOCLinks.update(state.activeIds)
        }

        this.scrollRAF = null
      })
    }

    static handleResize(): void {
      if (this.resizeRAF) return

      this.resizeRAF = requestAnimationFrame(() => {
        HeadingRegions.build()

        const newActiveIds = HeadingRegions.getVisibleIds()
        if (JSON.stringify(newActiveIds) !== JSON.stringify(state.activeIds)) {
          state.activeIds = newActiveIds
          MobileTOCLinks.update(state.activeIds)
        }

        this.resizeRAF = null
      })
    }

    static init(): void {
      state.reset()
      HeadingRegions.build()

      if (!state.currentSectionText) return

      if (state.headings.length === 0) {
        state.currentSectionText.textContent = INITIAL_OVERVIEW_TEXT
        return
      }

      state.activeIds = HeadingRegions.getVisibleIds()
      MobileTOCLinks.update(state.activeIds)
      MobileTOCLinks.setupInteraction()

      // 使用 passive 监听器优化性能
      window.addEventListener('scroll', this.handleScroll, { passive: true })
      window.addEventListener('resize', this.handleResize, { passive: true })
    }

    static cleanup(): void {
      if (this.scrollRAF) {
        cancelAnimationFrame(this.scrollRAF)
        this.scrollRAF = null
      }
      if (this.resizeRAF) {
        cancelAnimationFrame(this.resizeRAF)
        this.resizeRAF = null
      }

      window.removeEventListener('scroll', this.handleScroll)
      window.removeEventListener('resize', this.handleResize)

      state.activeIds = []
      state.headings = []
      state.regions = []
    }
  }

  // 生命周期管理
  document.addEventListener('astro:page-load', () => MobileTOCController.init())
  document.addEventListener('astro:after-swap', () => {
    MobileTOCController.cleanup()
    MobileTOCController.init()
  })
  document.addEventListener('astro:before-swap', () => MobileTOCController.cleanup())
</script>
